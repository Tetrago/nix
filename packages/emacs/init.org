* Configuration

#+PROPERTY: header-args:emacs-lisp :tangle yes

** Initial

#+begin_src emacs-lisp
(setq ring-bell-function 'ignore
      inhibit-splash-screen t
      inhibit-startup-message t
      auto-save-defaults nil)
(fset 'display-startup-echo-area-message 'ignore)
(global-set-key (kbd "C-l") nil)

(use-package general)
#+end_src


** Interface

*** Elements

#+begin_src emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

*** Font

#+begin_src emacs-lisp
(set-face-attribute 'default nil :family "Monaspace Neon Frozen" :height 110)
(set-face-attribute 'bold nil :family "Monaspace Neon Frozen" :weight 'bold)
(set-face-attribute 'italic nil :family "Monaspace Radon Frozen" :slant 'italic)
(set-face-attribute 'bold-italic nil :family "Monaspace Radon Frozen" :slant 'italic :weight 'bold)
#+end_src

*** Scrolling

#+begin_src emacs-lisp
(setq mouse-wheel-scroll-amount '(2 ((shift) . 10) ((control) . nil))
      mouse-wheel-progressive-speed nil
      scroll-conservatively 101
      scroll-margin 0)

(pixel-scroll-precision-mode 1)
#+end_src

*** Line Numbers

#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

*** Ligatures

#+begin_src emacs-lisp
(require 'calt)

(use-package ligature
  :config
  (ligature-set-ligatures 't (calt-ligatures))
  (ligature-set-ligatures 'prog-mode '("===" "!==" "=!=" "=/=" "/==" "/=" "#=" "==" "!=" "~~" "=~" "!~"
					       ">=" "<="
					       "<-->" "<->" "<!--" "<--" "-->" "<-" "->" "<~>" "<~~" "~~>" "<~" "~>"
					       "</" "/>" "</>" "<>"
					       "-:-" "=:=" ":>:" ":<:" "::>" "<::" "::" ":::"
					       "..=" "..-" "..<" ".=" ".-"
					       "<=>" "<<=" "=>>" "=<<" ">>=" "=>" "<<" ">>"
					       "..." "///" "//" "!!" "||" ";;"))
  (global-ligature-mode 1))
#+end_src

*** Theme

#+begin_src emacs-lisp
(use-package catppuccin-theme
  :after (auto-dark)
  :init
  (setq catppuccin-flavor (if (auto-dark--is-dark-mode-dbus) 'frappe 'latte))
  (load-theme 'catppuccin :no-confirm))

(use-package auto-dark
  :hook
  (auto-dark-dark-mode
   . (lambda ()
       (setq catppuccin-flavor 'frappe)
       (catppuccin-reload)
       ))
  (auto-dark-light-mode
   . (lambda ()
       (setq catppuccin-flavor 'latte)
       (catppuccin-reload)
       ))
  :init
  (auto-dark-mode 1))
#+end_src

*** Org Mode

#+begin_src emacs-lisp
(use-package org
  :custom
  (org-src-preserve-indentation nil)
  (org-edit-src-content-indentation 0))

(use-package org-modern
  :custom
  (org-modern-star 'replace)
  :hook (org-mode . org-modern-mode))
#+end_src

*** Olivetti

#+begin_src emacs-lisp
(use-package olivetti
  :hook (window-setup . olivetti-mode)
  :init
  (setq olivetti-body-width 120))
#+end_src

*** Golden Ratio

#+begin_src emacs-lisp
(use-package golden-ratio
  :config
  (golden-ratio-mode 1))
#+end_src

*** Beacon

#+begin_src emacs-lisp
(use-package beacon
  :config
  (beacon-mode 1))
#+end_src

*** Indent Guide

#+begin_src emacs-lisp
(use-package indent-bars
  :init
  (setq indent-bars-treesit-support t
	indent-bars-color '(highlight :face-bg t :blend 0.3)
	indent-bars-pattern " . ."
	indent-bars-width-frac 0.25
	indent-bars-pad-frac 0.1)
  :hook (prog-mode . indent-bars-mode))
#+end_src

*** Color Guides

#+begin_src emacs-lisp
(use-package colorful-mode
  :custom
  (colorful-use-prefix t)
  (colorful-only-strings 'only-prog)
  :config
  (global-colorful-mode 1))
#+end_src

*** Modeline

#+begin_src emacs-lisp
(use-package doom-modeline
  :init
  (setq doom-modeline-percent-position nil
	doom-modeline-position-line-format '("%l")
	doom-modeline-buffer-file-name-style 'relative-from-project)
  (doom-modeline-mode 1))
#+end_src

*** Git Gutter

#+begin_src emacs-lisp
(use-package git-gutter
  :hook (prog-mode . git-gutter-mode)
  :config
  (setq git-gutter:update-interval 0.02))

(use-package git-gutter-fringe
  :config
  (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-ft:deleted [128 192 224 240] nil nil 'bottom))
#+end_src


** Workflow

*** Evil Mode

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-keybinding nil
	evil-undo-system 'undo-redo)
  (evil-mode 1))

(use-package evil-collection
  :after (evil)
  :init
  (evil-collection-init))
#+end_src

*** Which Key

#+begin_src emacs-lisp
(use-package which-key
  :config
  (which-key-mode 1))
#+end_src

*** Projectile

#+begin_src emacs-lisp
(use-package rg)

(use-package projectile
  :general
  (:states 'normal "C-p" 'projectile-find-file)
  (:states 'normal :keymaps 'override "C-k" 'projectile-ripgrep)
  :init
  (setq projectile-cleanup-known-projects t
	projectile-switch-project-action #'projectile-dired)
  :config
  (projectile-mode 1))
#+end_src

*** Dired

#+begin_src emacs-lisp
(setq dired-omit-files "^\\.$\\|^\\.\\.$"
      dired-free-space nil)

(add-hook 'dired-mode-hook 'dired-hide-details-mode)
(add-hook 'dired-mode-hook 'dired-omit-mode)
(add-hook 'dired-mode-hook 'hl-line-mode)

(general-define-key :states 'normal "-" 'dired-jump)
(general-define-key :keymaps 'dired-mode-map "-" 'dired-up-directory)

(use-package nerd-icons-dired
  :hook (dired-mode . nerd-icons-dired-mode))
#+end_src

*** Direnv

#+begin_src emacs-lisp
(use-package envrc
  :hook (after-init . envrc-global-mode))
#+end_src

*** DevDocs

#+begin_src emacs-lisp
(use-package devdocs)
#+end_src


** Completion

*** Vertico

#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode 1))

(use-package emacs
  :custom
  (enable-recursive-minibuffers t)
  (read-extended-command-predicate #'command-completion-default-include-p)
  (minibuffer-prompt-properties
   '(read-only t cursor-intangible t face minibuffer-prompt)))

(use-package vertico-posframe
  :config
  (vertico-posframe-mode 1))
#+end_src

*** Terminal

#+begin_src emacs-lisp
(use-package vterm
  :general
  (:states 'normal "C-\\" 'vterm))
#+end_src

*** Orderless

#+begin_src emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

*** Consult

#+begin_src emacs-lisp
(use-package consult
  :init
  (advice-add #'register-preview :override #'consult-register-window)
  (setq register-preview-delay 0.5)

  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref))
#+end_src

*** Marginalia

#+begin_src emacs-lisp
(use-package marginalia
  :init
  (marginalia-mode 1))
#+end_src

*** Corfu

#+begin_src emacs-lisp
(use-package corfu
  :custom
  (corfu-cycle t)
  (corfu-preselect 'prompt)
  :bind
  (:map corfu-map
	("TAB" . corfu-next)
	([tab] . corfu-next)
	("S-TAB" . corfu-previous)
	([backtab] . corfu-previous))
  :init
  (global-corfu-mode 1))

(use-package emacs
  :custom
  (tab-always-indent 'complete)
  (text-mode-ispell-word-completion nil)
  (read-extended-command-predicate #'command-completion-default-include-p))
#+end_src

#+begin_src emacs-lisp
(use-package corfu-candidate-overlay
  :after (corfu)
  :config
  (corfu-candidate-overlay-mode 1))
#+end_src

#+begin_src emacs-lisp
(use-package kind-icon
  :after (corfu)
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

*** Cape

#+begin_src emacs-lisp
(use-package cape
  :init
  (add-hook 'completion-at-point-functions #'cape-dabbrev)
  (add-hook 'completion-at-point-functions #'cape-file)
  (add-hook 'completion-at-point-functions #'cape-elisp-block))
#+end_src


** Features

*** Tree-sitter

#+begin_src emacs-lisp
(use-package tree-sitter-lib
  :ensure nil
  :config
  (set-tree-sitter-lib-path))

(use-package treesit-auto
  :config
  (global-treesit-auto-mode))
#+end_src

*** LSP

#+begin_src emacs-lisp
(require 'lsp)

(use-package lsp-mode
  :hook (lsp-mode . lsp-enable-which-key-integration)
  :init
  (setq lsp-keymap-prefix "C-c l")
  :commands (lsp lsp-deferred))

(use-package lsp-ui
  :init
  (setq lsp-ui-sideline-show-diagnostics t
	lsp-ui-sideline-show-hover t
	lsp-ui-doc-enable t)
  :commands lsp-ui-mode)
#+end_src

*** Formatting

#+begin_src emacs-lisp
(defvar formatters '())

(use-package format-all
  :init
  :commands format-all-mode
  :hook ((prog-mode . format-all-mode)
	 (after-init . (lambda ()
			 (setq format-all-formatters formatters)))))
#+end_src


** Languages

*** C

#+begin_src emacs-lisp
(add-hook 'c-ts-mode-hook #'lsp-deferred)
(add-to-list 'formatters '("C" clang-format))
#+end_src

*** C++

#+begin_src emacs-lisp
(add-hook 'c++-ts-mode-hook #'lsp-deferred)
(add-to-list 'formatters '("C++" clang-format))
#+end_src

*** Rust

#+begin_src emacs-lisp
(use-package rust-mode
  :init
  (setq rust-mode-treesitter-derive t)
  (add-to-list 'formatters '("Rust" rustfmt))
  :hook ((rust-mode . (lambda () (setq indent-tabs-mode nil)))
	 (rust-mode . prettify-symbols-mode)
	 (rust-mode . lsp-deferred)))
#+end_src

*** Nix

#+begin_src emacs-lisp
(use-package nix-ts-mode
  :init
  (add-to-list 'formatters '("Nix" nixfmt))
  :hook (nix-ts-mode . lsp-deferred)
  :mode "\\.nix\\'")
#+end_src
