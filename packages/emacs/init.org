* Configuration

#+PROPERTY: header-args:emacs-lisp :tangle yes

** Essential

#+begin_src emacs-lisp
(use-package general)
#+end_src

** Interface

*** Elements

#+begin_src emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)

(setq mouse-wheel-scroll-amount '(2 ((shift) . 10) ((control) . nil))
      mouse-wheel-progressive-speed nil)
#+end_src

*** Font

#+begin_src emacs-lisp
(set-face-attribute 'default nil :family "Monaspace Neon Frozen" :height 110)
(set-face-attribute 'bold nil :family "Monaspace Neon Frozen" :weight 'bold)
(set-face-attribute 'italic nil :family "Monaspace Radon Frozen" :slant 'italic)
(set-face-attribute 'bold-italic nil :family "Monaspace Radon Frozen" :slant 'italic :weight 'bold)
#+end_src

*** Ligatures

#+begin_src emacs-lisp
(require 'calt)

(use-package ligature
  :config
  (ligature-set-ligatures 't (calt-ligatures))
  (ligature-set-ligatures 'prog-mode '("===" "!==" "=!=" "=/=" "/==" "/=" "#=" "==" "!=" "~~" "=~" "!~"
					       ">=" "<="
					       "<-->" "<->" "<!--" "<--" "-->" "<-" "->" "<~>" "<~~" "~~>" "<~" "~>"
					       "</" "/>" "</>" "<>"
					       "-:-" "=:=" ":>:" ":<:" "::>" "<::" "::" ":::"
					       "..=" "..-" "..<" ".=" ".-"
					       "<=>" "<<=" "=>>" "=<<" ">>=" "=>" "<<" ">>"
					       "..." "///" "//" "!!" "||" ";;"))
  (global-ligature-mode 1))
#+end_src

*** Theme

#+begin_src emacs-lisp
(use-package catppuccin-theme
  :after (auto-dark)
  :init
  (setq catppuccin-flavor (if (auto-dark--is-dark-mode-dbus) 'frappe 'latte))
  (load-theme 'catppuccin :no-confirm))

(use-package auto-dark
  :hook
  (auto-dark-dark-mode
   . (lambda ()
       (setq catppuccin-flavor 'frappe)
       (catppuccin-reload)
       ))
  (auto-dark-light-mode
   . (lambda ()
       (setq catppuccin-flavor 'latte)
       (catppuccin-reload)
       ))
  :init
  (auto-dark-mode 1))
#+end_src

*** Org Mode

#+begin_src emacs-lisp
(use-package org
  :custom
  (org-src-preserve-indentation nil)
  (org-edit-src-content-indentation 0))

(use-package org-modern
  :custom
  (org-modern-star 'replace)
  :hook (org-mode . org-modern-mode))
#+end_src

*** Maple

#+begin_src emacs-lisp
(use-package maple-minibuffer
  :ensure nil
  :hook (after-init . maple-minibuffer-mode)
  :config
  (setq maple-minibuffer:position-type 'window-center
	maple-minibuffer:height nil
	maple-minibuffer:width 0.7
	maple-minibuffer:cache t
	maple-minibuffer:action '(read-from-minibuffer read-string)))
#+end_src

*** Olivetti

#+begin_src emacs-lisp
(use-package olivetti
  :init
  (setq olivetti-body-width 120)
  :config
  (define-globalized-minor-mode global-olivetti-mode olivetti-mode (lambda () (olivetti-mode 1)))
  (global-olivetti-mode 1))
#+end_src

** Workflow

*** Evil Mode

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-keybinding nil
	evil-undo-system 'undo-redo)
  (evil-mode 1))

(use-package evil-collection
  :after (evil)
  :init
  (evil-collection-init))
#+end_src

*** Dirvish

#+begin_src emacs-lisp
(use-package dirvish
  :general
  (:states 'normal "-" 'dirvish)
  :init
  (dirvish-override-dired-mode 1))
#+end_src

*** Which Key

#+begin_src emacs-lisp
(use-package which-key
  :config
  (which-key-mode 1))
#+end_src

*** Projectile

#+begin_src emacs-lisp
(use-package rg)

(use-package projectile
  :general
  (:states 'normal "C-p" 'projectile-find-file)
  (:states 'normal :keymaps 'override "C-k" 'projectile-ripgrep)
  :init
  (setq projectile-cleanup-known-projects t)
  :config
  (projectile-mode 1))
#+end_src

** Completion

*** Vertico

#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode 1))

(use-package emacs
  :custom
  (enable-recursive-minibuffers t)
  (read-extended-command-predicate #'command-completion-default-include-p)
  (minibuffer-prompt-properties
   '(read-only t cursor-intangible t face minibuffer-prompt)))
#+end_src

*** Orderless

#+begin_src emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

*** Consult

#+begin_src emacs-lisp
(use-package consult
  :init
  (advice-add #'register-preview :override #'consult-register-window)
  (setq register-preview-delay 0.5)

  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref))
#+end_src

*** Marginalia

#+begin_src emacs-lisp
(use-package marginalia
  :init
  (marginalia-mode 1))
#+end_src

*** Corfu

#+begin_src emacs-lisp
(use-package corfu
  :custom
  (corfu-cycle t)
  (corfu-preselect 'prompt)
  :bind
  (:map corfu-map
	("TAB" . corfu-next)
	([tab] . corfu-next)
	("S-TAB" . corfu-previous)
	([backtab] . corfu-previous))
  :init
  (global-corfu-mode 1))

(use-package emacs
  :custom
  (tab-always-indent 'complete)
  (text-mode-ispell-word-completion nil)
  (read-extended-command-predicate #'command-completion-default-include-p))
#+end_src

#+begin_src emacs-lisp
(use-package corfu-candidate-overlay
  :after (corfu)
  :config
  (corfu-candidate-overlay-mode 1))
#+end_src

#+begin_src emacs-lisp
(use-package kind-icon
  :after (corfu)
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

*** Cape

#+begin_src emacs-lisp
(use-package cape
  :init
  (add-hook 'completion-at-point-functions #'cape-dabbrev)
  (add-hook 'completion-at-point-functions #'cape-file)
  (add-hook 'completion-at-point-functions #'cape-elisp-block))
#+end_src

** Languages

#+begin_src emacs-lisp
(defvar lsp-hooks '(c-mode
		    c++-mode))
(defvar format-hooks '(("C" (clang-format))))
#+end_src

*** Rust

#+begin_src emacs-lisp
(use-package rust-mode
  :init
  (setq rust-mode-treesitter-derive t)
  :hook ((rust-mode . (lambda () (setq indent-tabs-mode nil)))
	 (rust-mode . prettify-symbols-mode)))

(add-to-list 'lsp-hooks 'rust-mode)
(add-to-list 'format-hooks ("Rust" (rustfmt)))
#+end_src

*** Nix

#+begin_src emacs-lisp
(use-package nix-mode
  :mode "\\.nix\\'")

(add-to-list 'lsp-hooks 'nix-mode)
(add-to-list 'format-hooks ("Nix" (nixfmt)))
#+end_src

*** LSP

#+begin_src emacs-lisp
(require 'lsp)

(use-package lsp-mode
  :config
  (load-lsp)
  :custom
  (lsp-keymap-prefix "C-c l")
  :hook ((lsp-mode . lsp-enable-which-key-integration)
	 ,@(mapcar (lambda (mode) (cons mode 'lsp)) lsp-hooks))
  :commands lsp)

(use-package lsp-ui
  :init
  (setq lsp-ui-sideline-show-diagnostics t
	lsp-ui-sideline-show-hover t)
  :commands lsp-ui-mode)
#+end_src

*** Formatting

#+begin_src emacs-lisp
(use-package format-all
  :commands format-all-mode
  :hook (prog-mode . format-all-mode)
  :config
  (setq format-all-formatters format-hooks))
#+end_src
